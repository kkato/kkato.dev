<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on kkato.dev</title>
    <link>https://kkato.dev/posts/</link>
    <description>Recent content in Posts on kkato.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 13 Aug 2023 13:11:42 +0900</lastBuildDate>
    <atom:link href="https://kkato.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Alertmanagerのwebhookを試してみる</title>
      <link>https://kkato.dev/posts/webhook-nginx/</link>
      <pubDate>Sun, 13 Aug 2023 13:11:42 +0900</pubDate>
      <guid>https://kkato.dev/posts/webhook-nginx/</guid>
      <description>Kubernetes上でAlertmanagerがちゃんと通知できるか、どんな内容が通知されているのか確認してみようとすると、連携するためのSlackが必要であったり、Emailを送信するにもメールサーバが必要だったりと、意外と気軽に試せないということがありました。&#xA;なので、今回はwebhookの機能を使ってNginxにリクエストを飛ばし、リクエストの内容をログから確認してみようと思います。&#xA;webhookとは? Alertmanagerのreceiverには以下が指定できます。&#xA;Email Opesgenie PagerDuty Pushover Slack AWS SNS VictorOps Webhook Wechat Telegram Webex Webhookとは特定のエンドポイントに対してHTTP POSTリクエストでアラートの情報を送信するというものです。 外部サービスではないので、自分自身でエンドポイントを用意し、自分自身で後続の処理を実装する必要があります。&#xA;例えば、以下のように設定します。&#xA;receivers: - name: &amp;#34;nginx&amp;#34; webhook_configs: - url: &amp;#39;http://nginx-svc.default:8080/&amp;#39; webhookの連携先としてnginxを使う 今回はwebhookの連携先としてnginxを使用します。&#xA;nginxを使って実現したいことは以下のとおりです。&#xA;エンドポイントを用意する リクエスト内容を確認する nginx.confの初期設定をベースにしていますが、そのままだとリクエスト内容を確認することができないので、設定を追加しました。 log_formatで$request_bodyを指定し、/にアクセスした時に$request_bodyがログとして標準出力に出るように設定しています。&#xA;しかし、$request_bodyを有効化するにはproxy_passなどの後続処理が必要になります。なので、proxy_passで/trashというエンドポイントにリクエストを転送し、/trashで特に意味のない処理(1x1ピクセルのgifを返す)をしています。&#xA;The variable’s value is made available in locations processed by the proxy_pass, fastcgi_pass, uwsgi_pass, and scgi_pass directives when the request body was read to a memory buffer.&#xA;http://nginx.org/en/docs/http/ngx_http_core_module.html#var_request_body&#xA;user nginx; worker_processes auto; error_log /var/log/nginx/error.log notice; pid /var/run/nginx.</description>
    </item>
    <item>
      <title>KubernetesのCronJobが失敗したときにアラートをあげる</title>
      <link>https://kkato.dev/posts/k8s-job-alert/</link>
      <pubDate>Tue, 08 Aug 2023 19:48:39 +0900</pubDate>
      <guid>https://kkato.dev/posts/k8s-job-alert/</guid>
      <description>CronJobは、指定したcronフォーマットに基づいて定期的にJobを実行するという機能です。 主にバックアップの取得やメール送信など、定期的な処理を実行する際に便利です。&#xA;一方で、CronJobが失敗した際にどのように検知すべきかについては、あまり情報がありませんでした。 なので、今回はそちらについて考えてみたいと思います。&#xA;kube-state-metricsを活用する kube-state-metricsとはKubernetesクラスタ内のリソースの状態をメトリクスとして提供してくれるというものです。 kube-state-metricsではCronJobやJobの状態をメトリクスとして取得することができます。 この方式採用している記事が多かったので、こちらで検討を進めてみたいと思います。&#xA;※記事&#xA;https://medium.com/@tristan_96324/prometheus-k8s-cronjob-alerts-94bee7b90511 https://www.giffgaff.io/tech/monitoring-kubernetes-jobs どのメトリクスを使い監視するか CronJobはcronフォーマットで指定された時刻にJobを生成し、そのJobがPodを生成するという3層の親子構造になっています。 また、CronJobとJobの関係は1対多で、JobとPodの関係は1対多になります。&#xA;Jobが完了するのはcompletions個のPodが正常終了した場合、もしくはbackoffLimit個のPodが異常終了した場合に限ります。&#xA;completions completions個のPodが成功すると、Jobが完了したとみなされる デフォルトは1 backoffLimit 失敗したと判断するまでの再試行回数で、この回数を超えるとJobは失敗とみなされる デフォルトは6 そして、アラートを上げたいのはJobが失敗した時です。言い換えると、backoffLimit個のPodが異常終了したときにアラートを上げるということになります。 何個のPodが異常終了したのか監視することも可能だと思いますが、ここではJobのステータスを監視するのが適切かと思います。&#xA;メトリクス 対応する項目 説明 kube_job_status_succeeded .status.succeeded Jobの管理下で正常終了したPodの数 kube_job_status_failed .status.failed Jobの管理下で異常終了したPodの数 kube_job_complete .status.conditions.type Jobが成功したかどうか kube_job_failed .status.conditions.type Jobが失敗したかどうか 参考: https://github.com/kubernetes/kube-state-metrics/blob/main/docs/job-metrics.md&#xA;Jobに関するメトリクスは複数ありますが、この中でも特にkube_job_failedを使ってアラートを上げるのが良さそうです。 以下の設定だと、Jobが失敗したときにアラートが上がります。&#xA;kube_job_failed &amp;gt; 0 アラートが発火し続けてしまう問題 失敗したJobは削除されずに残り続けるので、アラートが発火し続けてしまいます。 なので、JobのttlSecondsAfterFinishedを設定し、数分後にJobが削除されるようにします。&#xA;ttlSecondsAfterFinished 指定秒後にJobを削除できる CronJobのfailedJobsHistoryLimitを設定するという方法も思いつきましたが、0にしてしまうとそもそもアラートが上がりません。&#xA;failedJobsHistoryLimit 失敗したJobを指定個数分残しておける デフォルトは1 </description>
    </item>
    <item>
      <title>EC2のデフォルトユーザを削除する</title>
      <link>https://kkato.dev/posts/ec2-user/</link>
      <pubDate>Wed, 02 Aug 2023 13:11:46 +0900</pubDate>
      <guid>https://kkato.dev/posts/ec2-user/</guid>
      <description>AWSでEC2インスタンスを建てると、デフォルトで&amp;quot;ec2-user&amp;quot;という名前のユーザが作成されます。公開鍵認証なので高いセキュリティレベルが担保されており、ユーザ名が知られていても特に問題はないと思います。しかし、万が一を考えてデフォルトのec2-userを削除し、新しいユーザでアクセスできるように設定したいと思います。&#xA;ec2-userを削除するまでの流れ useraddコマンドを使い新しくユーザを追加します。追加したユーザにsudo権限を付与します。また、追加したユーザのパスワードも登録します。&#xA;ssh -i ~/.ssh/秘密鍵の名前 ec2-user@EC2インスタンスのパブリックIP sudo su - useradd -m ユーザ名 usermod -aG wheel ユーザ名 passwd ユーザ名 追加したユーザのホームディレクトリにauthorized_keys(公開鍵の情報)をコピーし、適切な権限を付与します。&#xA;mkdir /home/ユーザ名/.ssh cp /home/ec2-user/.ssh/authrized_keys /home/ユーザ名/.ssh chown -R ユーザ名:ユーザ名 /home/ユーザ名/.ssh chmod 700 /home/ユーザ名/.ssh chmod 600 /home/ユーザ名/.ssh/authorized_keys その後新しく追加したユーザで接続し直し、接続できることを確認したら、ec2-userを削除します。&#xA;exit ssh -i ~/.ssh/秘密鍵の名前 ユーザ名@EC2インスタンスのパブリックIP sudo userdel -r ec2-user </description>
    </item>
    <item>
      <title>Linuxで公開鍵認証をする</title>
      <link>https://kkato.dev/posts/pubkey-auth/</link>
      <pubDate>Wed, 12 Jul 2023 21:23:52 +0900</pubDate>
      <guid>https://kkato.dev/posts/pubkey-auth/</guid>
      <description>Linuxでの公開鍵認証の設定をよく忘れてしまうので、備忘録としてメモを残しておきます。&#xA;接続元での設定 接続元で鍵を生成し、公開鍵を接続先のサーバーへコピーします。&#xA;ssh-keygen scp ~/id_rsa.pub username@server:~/ 接続先の設定 接続先のサーバーで公開鍵の情報をauthorized_keysに登録し、適切な権限を設定します。&#xA;mkdir .ssh chmod 700 .ssh cat id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys chmod 600 authorized_keys 公開鍵認証を有効化し、パスワード認証を無効化します。&#xA;sudo vi /etc/ssh/sshd_config --- PubkeyAuthentication yes PasswordAuthentication no sshdを再起動します。&#xA;systemctl restart sshd </description>
    </item>
    <item>
      <title>kubesprayでk8sクラスタを構築する</title>
      <link>https://kkato.dev/posts/kubespray/</link>
      <pubDate>Mon, 01 May 2023 10:07:31 +0900</pubDate>
      <guid>https://kkato.dev/posts/kubespray/</guid>
      <description>k8s構築ツールはいろいろありますが、公式ドキュメントでは以下が紹介されています。&#xA;学習環境 Minikube Kind プロダクション環境 kubeadm kops kubespray ※各ツールの違いについてはこちら&#xA;今回はその中でもkubesprayというツールを使ってk8sクラスタを構築してみようと思います。kubeadmは1台ずつインストールを実施するのに対し、kubesprayはAnsibleを使い、各ノードで一斉にインストールを実施します。なので、kubesprayは台数が多いときに便利です。&#xA;ちなみに、kubesprayは内部でkubeadmを使っているので、kubespray = kubeadm + Ansibleという感じです。また、kubesprayを使うと、コンテナランタイム(デフォルトはcontainerd)やPod間通信のネットワークプラグイン(デフォルトはcalico)などが自動でインストールされるので、非常に便利です。&#xA;構築 前提:&#xA;ベアメタル(Intel NUC11PAHi5)上に構築 Control Planex1台とWorkerx3台の4台構成 OSはRocky Linux9.1 ルーター側の設定で固定IPを割り当て 各ノードのスペックは以下 CPU メモリ ストレージ 4コア 16GB 500GB ssh公開認証の設定 手元のPCからパスワードなしでssh接続できるように公開鍵認証の設定をします。 ssh-keygenのパスワードには空文字を指定します。&#xA;kkato@bastion:~$ ssh-keygen kkato@bastion:~$ scp ~/.ssh/id_rsa.pub 192.168.10.xxx:~/ 公開鍵の情報を各ノードのauthorized_keysに追記します。&#xA;kkato@nuc01:~$ mkdir ~/.ssh kkato@nuc01:~$ chmod 700 /.ssh kkato@nuc01:~$ cat id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys kkato@nuc01:~$ chmod 600 ~/.ssh/authorized_keys /etc/hostsの編集 手元のPCから各ノードへホスト名で接続できるように、/etc/hostsを編集します。&#xA;kkato@bastion:~$ cat /etc/hosts --- 192.168.10.121 nuc01 192.168.10.122 nuc02 192.168.10.123 nuc03 192.168.10.124 nuc04 ユーザーの設定 各ノードのユーザーがパスワードなしでsudo実行できるよう設定します。</description>
    </item>
    <item>
      <title>Raspberry Pi上にk8sクラスタを構築する</title>
      <link>https://kkato.dev/posts/raspi-k8s/</link>
      <pubDate>Sun, 23 Apr 2023 16:13:42 +0900</pubDate>
      <guid>https://kkato.dev/posts/raspi-k8s/</guid>
      <description>最近ラズパイを手に入れたので、kubeadmを使ってk8sクラスタを組んでみたいと思います。 Control Planeノードx1 Workerノードx3の構成です。&#xA;準備したものは以下のとおりです。&#xA;アイテム 個数 Raspberry Pi 4 Model B / 4GB 4 Raspberry Pi PoE+ HAT 4 ケース 1 microSD 64GB 4 スイッチングハブ 1 LANケーブル 0.15m 4 LANケーブル 1m 1 SDカードリーダー 1 HDMI変換アダプター 1 OSの設定 OSのインストール 手元のPCはUbuntu 22.04 LTSなので、以下のコマンドでRaspberry Pi Imagerをインストールします。&#xA;$ sudo apt install rpi-imager そして、microSDカード4枚全てにUbuntu Server 22.10 (64-bit)を焼きます。&#xA;$ rpi-imager microSDカードを差し込み、ディスプレイ(micro HDMI)とキーボード(USB)を接続し、OSの初期設定を行います。初期ユーザー名とパスワードはubuntuです。パッケージを最新にしておきます。&#xA;$ sudo spy update $ sudo apt upgrade -y 新しくユーザを作成し、ユーザにsudo権限を付与します。sudoをパスワードなしでできるように追加の設定もします。&#xA;$ sudo adduser kkato $ sudo usermod -aG sudo kkato $ sudo visudo --- kkato ALL=NOPASSWD: ALL 固定IPの設定 OS側で固定IPを設定する方法もありますが、今回はルーター側で設定してみたいと思います。 まずは以下のコマンドを使って、MACアドレスを確認します。(以下だと、eth0のdc:a6:32:70:52:2aです。)</description>
    </item>
    <item>
      <title>ジョージア工科大学 OMSCSを振り返って</title>
      <link>https://kkato.dev/posts/omscentral/</link>
      <pubDate>Mon, 10 Apr 2023 18:05:06 +0900</pubDate>
      <guid>https://kkato.dev/posts/omscentral/</guid>
      <description>2020年8月にジョージア工科大学 コンピューターサイエンス修士課程(通称OMSCS)に入学し、2022年12月に卒業しました。今回は入学から卒業までを振り返ってみようと思います。&#xA;なぜOMSCSを始めたのか 実は途中でOMSAからOMSCSに編入していたりしますが、OMSCSを始めた主な目的は以下です。&#xA;専門的な知識を身につける 私は物理学の学士課程を卒業していますが、物理を学ぶと選択肢は広がるものの少し中途半端なんですよね。例えば、機械系に行きたいとすると機械工学の学生でいいじゃん、電子系に行きたいとすると電子工学の学生でいいじゃん、IT系に行きたいとすると情報系の学生でいいじゃん、となってしまいます。なので、物理学＋αでより専門的な知識を身につけて、今後のキャリアアップに役立てたいと考えました。&#xA;海外で就職する 実は私はカナダの大学で学士号を取得していますが、卒業当時の私は現地就職するだけの自信と実力がありませんでした。国際的に評価されている大学の修士号であれば、海外で就職するときもプラスに働くと思い、OMSCSを始めることにしました。&#xA;実際どうだったか 正直かなり大変でした。コロナで家にいる時間も多かったですが、平日の仕事終わりと週末は基本的に家でずっと勉強していました。遊びに誘われることもありましたが、毎回断っていたら誰からも誘われなくなりました笑&#xA;どれくらいの時間が必要かというと、前提知識があるかどうかにもよると思いますが、1コースにつき週10-20時間は必要だと思います。ちなみに私は基本的に1学期に2コース取っていたので、休む時間がほとんどありませんでした。&#xA;また、卒業には以下の条件があり、良い成績をとらないと卒業できないというプレッシャーがありました。&#xA;最初の12ヶ月でfundamental courseを最低2つ履修し、B以上の成績を収めなければならない 専門分野のコースは全てB以上の成績を収めなければならない 合計GPAが3.0/4.0以上でなければならない どんな授業を受けたのか OMSCSではSpecialization*1といって専門分野を決める必要があるのですが、私はComputing Systemsにしました。その理由としては配属された部署がデータベースや分散システムなどのミドルウェアを扱うところだったから、また低レイヤーの技術に興味があったからです。OMSCSでは10コース履修する必要がありますが、そのうち5, 6コースを自分の専門分野から履修しなければなりません(いわゆる必修科目)。&#xA;学期 受講したコース 難易度 作業量 Fall 2020 CSE6040 Computing for Data Anlysis 易しい 10時間/週 Fall 2020 ISYE6501 Introduction to Analytics Modeling 普通 15時間/週 Summer 2021 CS6300 Software Development Process 普通 10時間/週 Fall 2021 CS6250 Computer Networks 普通 10時間/週 Fall 2021 CS7646 Machine Learning for Trading 普通 15時間/週 Spring 2022 CS6035 Introduction to Information Security 普通 15時間/週 Spring 2022 CS6200 Introduction to Operating Systems 難しい 20時間/週 Summer 2022 CS6262 Network Security 普通 15時間/週 Fall 2022 CS6515 Introduction to Graduate Algorithms 難しい 15時間/週 Fall 2022 CS9903-O13 Quantum Computing 易しい 10時間/週 受講したコースについて少し紹介しようと思います。2023年現在、OMSCSでは61コース提供されており*2、定期的に追加・更新されます。また、OMSCSにはOMSCentral*3という非公式のレビューサイトがあるので、そちらも参考にしてみてください。</description>
    </item>
    <item>
      <title>ジョージア工科大学 OMSCSへの出願方法</title>
      <link>https://kkato.dev/posts/omscs/</link>
      <pubDate>Tue, 21 Mar 2023 18:04:49 +0900</pubDate>
      <guid>https://kkato.dev/posts/omscs/</guid>
      <description>ジョージア工科大学 コンピューターサイエンス修士課程(通称OMSCS)の概要とその出願方法について紹介します。&#xA;OMSCSとは Online Master of Science in Computer Science (OMSCS)はアメリカの州立大学であるジョージア工科大学が提供しているプログラムになります。&#xA;このプログラムの特徴としては以下が挙げられます*1。&#xA;全てオンラインで完結すること 学費が安いこと オンキャンパスと同等の学位であること 近年、MOOCなどオンラインで取得できる学位プログラムは増えつつありますが、OMSCSは2014に開始され、オンラインの学位プログラムとしては先駆け的な存在です。また、OMSCSは学費が安いことを売りにしており、オバマ元大統領も言及しています*2。そして、OMSCSはオンラインの学位とオンキャンパスの学位を区別せず、同等の学位として扱います。卒業証書には&amp;quot;Master of Science in Computer Science&amp;quot;と記載されます。&#xA;実際に私が支払った金額を参考までに載せておきます。(Spring 2021は諸々の事情により、学期の途中から休学することにしました。)&#xA;学期 米ドル 日本円 Fall 2020 $1951 21万円 Spring 2021 $455 5万円 Summer 2021 $841 9万円 Fall 2021 $1381 16万円 Spring 2022 $1341 17万円 Summer 2022 $841 11万円 Fall 2022 $1187 17万円 合計 $8037 96万円 最近ではOMSCS以外にもOnline Master of Science in Analytics (OMSA)やOnline Master of Science in Cybersecurity (OMS Cybersecurity)などのプログラムが提供されています。</description>
    </item>
  </channel>
</rss>
